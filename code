#define F_CPU 16000000UL
#include <inttypes.h>
#include <avr/io.h>
#include <avr/interrupt.h>
#include <avr/sleep.h>
#include <util/delay.h>
#define 	RED             	1
#define 	YELLOW          	2
#define 	GREEN           	3
#define 	BLUE           		4
#define 	OSCILLOSCOP     	5
#define 	BUTTON          	0
#define 	INDICATOR_PORT_PWM  	PORTC
#define 	INDICATOR_DDR_PWM  	DDRC
#define 	NUMBER  		PORTD
#define 	DIGIT  			PORTE
#define 	BUTTON_TIMER  		PORTA
#define 	OSCILLOSCOP_STATE  	DDRB
#define 	MOTOR_STATE  		PORTF
#define 	VOLTAGE  		PORTB


unsigned int digit1 = 0, digit2 = 0, digit3 = 0, digit4 = 0;
unsigned char cell = 1;
int encoder = 0;
int ActiveTimer = 0;
int voltage = 0;
int led = 0;
int flag_stop = 0;
int flag_light = 0;
int flag_start = 0;
int arr_voltage[4] = { 240, 530, 670, 1000};
int arr_led[4] = {
		  0b00000011,
		  0b00000101,
		  0b00001001,
		  0b00010001
		 };
unsigned int numeric [10] = {
   0x3f, 0x6, 0x5b, 0x4f, 0x66, 0x6d, 0x7d, 0x7, 0x7f, 0x6f
			   };

void
init_pwm (void);
 
 
void
init_portc (void);
			 
void
init_limit_switch(void);
 
uint8_t
input_state (uint8_t pin);

void
init_data(void);
 
void
process_timeoff(void);
 
void
process_pause(void);
 
void
process_reset(void);
 
void
number_mask(void);

void
input_number (unsigned int razbivka_chisla);

void
init_timer(void);

void
start (void);

void
heater_and_other_stop(void);

void
heater_and_other_start(void);

void
init_func(void);

void
heater_and_motor_stop(void);

void
backlight_works(void);

void
all_stop(int timer_counter);

void
stop_without_backlight(void);

ISR (TIMER0_OVF_vect)
{
   if (cell == 1) {DIGIT = 0b00000001; NUMBER = numeric[digit1];}
   if (cell == 2) {DIGIT = 0b00000010; NUMBER = numeric[digit2];}
   if (cell == 3) {DIGIT = 0b00000100; NUMBER = numeric[digit3];}
   if (cell == 4) {DIGIT = 0b00001000; NUMBER = numeric[digit4];}
   cell++;
   if (cell > 4) cell = 1;
}

ISR (TIMER1_COMPA_vect)
{
   if(ActiveTimer == 1 && encoder > 0)
   {
      encoder--;
      if (encoder != 0)
	 heater_and_other_start();     
      else
	 heater_and_other_stop();
      if (encoder == 0) process_timeoff();
   }   
}


int main()
 {
    
   int button_state = 0;
   int button_state_prev = 0;
    
   TCCR0 |= (1 << 2) | (1 << 1); 
   TCCR0 |= (1 << 0);
   TIMSK |= (1 << 0);
   TCNT0 = 0;
   sei();
    
   OSCILLOSCOP_STATE |= (1 << OSCILLOSCOP) ;
   VOLTAGE &= ~(1 << OSCILLOSCOP); 
       
   init_func();
     
   while(1)
   {
      if (~PING & (1 << 0))
      {
	 OCR1A = arr_voltage[voltage];
      
	 input_number(encoder);
      
	 if (~PINA & (1 << 0))
	 {
	    encoder += 5;
	    flag_stop = 0;
	    _delay_ms(300);
	    if (encoder > 3600) encoder = 0;
	 }
	 
	 if (~PINA & (1 << 1))
	 {
	    encoder -= 5;
	    flag_stop = 0;
	    _delay_ms(300);
	    if (encoder < 0) encoder = 0;
	 }  
	    
	 if (~PINA & (1 << 2))
	 {
	    while (~PINA & (1 << 2));
	    if (encoder == 0 )
	    {
	       encoder = 30;
	       flag_start = 0;
	       start();
	    }
	    else if (encoder != 0 && flag_start == 0 )
	    {
	       start();
	    }
	    else if (encoder != 0 && flag_start == 1 )
	    {
	       encoder += 30;
	       flag_start = 0;
	       start();
	    }
	    
	    _delay_ms(30);
	 }
	 
	 if (~PINA & (1 << 3))
	 { 
	    if (encoder != 0 && flag_stop == 0)
	    {
	       process_pause();
	       flag_stop = 1;
	    }
	    else 
	    {
	       process_reset();
	       flag_stop = 0;
	    }
	    while (~PINA & (1 << 3));
	    _delay_ms(200);
	 }
	 
	 if (flag_light == 1)
	 {
	    PORTF &= ~(1 << 1) ;
	    flag_light = 0;
	 }
 
	 button_state = input_state(0);
	 INDICATOR_PORT_PWM = arr_led[led];
	 
	 if ((button_state == 1) && (button_state_prev == 0))
	 {
	    if (ActiveTimer == 0)
	    {
	       voltage--;
	       if (voltage < 0) voltage = 3;
	       led--;
	       if (led < 0) led = 3;
	    }   
	 }
	 button_state_prev = button_state;
	 
	 all_stop(encoder);
      }
      else 
      { 
	 
	 stop_without_backlight();
	 ActiveTimer = 0;
	 flag_start = 0;
	 
	 input_number(encoder);
      
	 if (~PINA & (1 << 0))
	 {
	    encoder += 5;
	    flag_stop = 0;
	    _delay_ms(300);
	    if (encoder > 3600) encoder = 0;
	 }
	 
	 if (~PINA & (1 << 1))
	 {
	    encoder -= 5;
	    flag_stop = 0;
	    _delay_ms(300);
	    if (encoder < 0) encoder = 0;
	 }
	 
	 button_state = input_state(0);
	 INDICATOR_PORT_PWM = arr_led[led];
	 
	 if ((button_state == 1) && (button_state_prev == 0))
	 {
	    if (ActiveTimer == 0)
	    {
	       voltage--;
	       if (voltage < 0) voltage = 3;
	       led--;
	       if (led < 0) led = 3;
	    }   
	 }
	 button_state_prev = button_state;
	 all_stop(encoder);
	 
	 if (flag_light == 0)
	 {
	    backlight_works();
	    flag_light = 1;
	 }
      }
   }
   return 0;
 }
 
void
init_limit_switch(void)
{
   DDRG &= ~(1 << 0);
   PORTG |= (1 << 0);
} 
 
void
init_timer(void)
{
   DDRD = 0b11111111;
   DDRE = 0b00001111;
   
   DDRA &= ~((1 << 0) | (1 << 1) | (1 << 2) | (1 << 3)) ;
   BUTTON_TIMER |= (1 << 0) | (1 << 1)| (1 << 2) | (1 << 3);
   
   DDRF |= (1 << 0) | (1 << 1);
}

void
input_number (unsigned int number_breakdown)
{
   digit1 = number_breakdown / 60 / 10;
   digit2 = number_breakdown / 60 % 10;
   digit3 = number_breakdown % 60 / 10;
   digit4 = number_breakdown % 60 % 10;
}
 
uint8_t
input_state (uint8_t pin)
{
   uint8_t button_state;
   button_state = PINC & (1 << pin);
   if (button_state != 0)
      button_state = 1;
   else
      button_state = 0;
   return button_state;
}

void
all_stop(int timer_counter)
{
   if (timer_counter == 0)
   {
      stop_without_backlight();
   }  
}

void
start (void)
{ 
   TCCR3B &= ~(1 << CS31);
   TCCR3B |= (1 << CS32) | (1 << CS30); 
   
   TIMSK |= (1 << OCIE1A); 
   OCR3BH = 0b00111101;
   OCR3BL = 0b00001001;
   TCNT1 = 0;
   
   TCCR3B |= (1 << WGM32);
   
   heater_and_other_start();
   
   ActiveTimer = 1;
   flag_stop = 0;
   flag_start = 1;
}

void
init_portc (void)
{
   INDICATOR_DDR_PWM |= (1 << RED) | (1 << YELLOW) | (1 << GREEN) | (1 << BLUE);
   INDICATOR_PORT_PWM &= ~((1 << RED) | (1 << YELLOW) | (1 << GREEN) | (1 << BLUE));
    
   INDICATOR_DDR_PWM &= ~(1 << BUTTON);
   INDICATOR_PORT_PWM |= (1 << BUTTON);
}
 
void
init_pwm (void)
{
   TCCR1A |= (1 << COM1A1); 
   TCCR1A &= ~(1 << COM1A0); 
    
   TCCR1A |= (1 << WGM10);
   TCCR1A |= (1 << WGM11);
    
   TCCR1B |= (1 << WGM12);
   TCCR1B &= ~(1 << WGM13);
    
 
   TCCR1B &= ~(1 << CS11);
   TCCR1B |= (1 << CS12) | (1 << CS10);  
}
 
void
process_timeoff(void)
{
   init_data();
   flag_start = 0;
}
 
void
process_pause(void)
{
   ActiveTimer = 0;
   flag_start = 0;
   backlight_works();
   heater_and_motor_stop();
   
}
 
void
init_data(void)
{
   heater_and_other_stop();
   encoder = 0;
   ActiveTimer = 0;
}
 
void
number_mask(void)
{
   init_data();
}
 
void
process_reset(void)
{
   init_data();
}

void
heater_and_other_start(void)
{
   OSCILLOSCOP_STATE |= (1 << OSCILLOSCOP) ;
   VOLTAGE |= (1 << OSCILLOSCOP); 
   PORTF |= (1 << 0) | (1 << 1);
}

void
heater_and_other_stop(void)
{
   OSCILLOSCOP_STATE &= ~(1 << OSCILLOSCOP) ;
   VOLTAGE &= ~(1 << OSCILLOSCOP);
   PORTF &= ~(1 << 0);
   PORTF &= ~(1 << 1);
}

void
stop_without_backlight(void)
{
   OSCILLOSCOP_STATE &= ~(1 << OSCILLOSCOP) ;
   VOLTAGE &= ~(1 << OSCILLOSCOP);
   PORTF &= ~(1 << 0);
}

void
backlight_works(void)
{
   PORTF |= (1 << 1) ;
}

void
heater_and_motor_stop(void)
{
   OSCILLOSCOP_STATE &= ~(1 << OSCILLOSCOP) ;
   VOLTAGE &= ~(1 << 5);
   MOTOR_STATE &= ~(1 << 0) ;
}

void
init_func(void)
{
   init_pwm();
   init_portc();
   init_timer();
   init_data();
   init_limit_switch();
}
